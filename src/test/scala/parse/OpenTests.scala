package org.syspro.spc
package parse

import lexer.Lexer
import parser.grammar.Grammar
import parser.grammar.Grammar._
import parser.grammar.Success
import parser.parsing_tree.*

import org.scalatest.funsuite.AnyFunSuite

import scala.jdk.CollectionConverters.*


class OpenTests extends AnyFunSuite{

  test("Test1") {
    val text ="""
        |class Indent1
        |   def notMultipleOf2(): Boolean
        |      return true
        |""".stripMargin

      Grammar.parse(text).root().descendants(true)
  }

  test("Test11") {
    val text ="""
                |class Bad2
                |    val x = 
                |    val y = 42
                |""".stripMargin

    Grammar.parse(text).root().descendants(true)
  }

  test("Test12") {
    val text =
      """
        |object Factorial
        |
        |  def iterative()
        |    return
        |
        |  def recursive()
        |    return
        |
        |""".stripMargin

    val root = Grammar.parse(text).root()
    println(root.slot(0).slot(0).trailingTriviaLength())
    println(root.slot(0).slot(0).slotCount())
  }

}
